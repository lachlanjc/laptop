#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

fancy_echo "Showing hidden files ..."
defaults write com.apple.Finder AppleShowAllFiles true
killall Finder

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list --formula | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "universal-ctags/universal-ctags"
tap "heroku/brew"

# Unix
brew "universal-ctags", args: ["HEAD"]
brew "git"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "watchman"
brew "zsh"

# Heroku
brew "heroku/brew/heroku"
brew "parity"

# GitHub
brew "gh"

# Image manipulation
brew "imagemagick"
brew "guetzli"

# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"

# Ruby & Node tools
brew "rbenv"
brew "n"
brew "yarn"

# Databases
brew "postgres", restart_service: :changed
brew "redis", restart_service: :changed
EOF

fancy_echo "Installing Node LTS (requires sudo) ..."
sudo n lts
yarn global add vercel
yarn global add npm-check-updates
yarn global add prettier

fancy_echo "Installing Ruby stable ..."
eval "$(rbenv init -)"
latest_ruby() {
  rbenv install -l | grep -E '^\d' - | sort | tail -1
}
rbenv install $(latest_ruby)
rbenv global $(latest_ruby)

fancy_echo "Updating Heroku binary ..."
brew unlink heroku
brew link --force heroku

# Apps
fancy_echo "Installing apps ..."

applications=(
  1password
  appcleaner
  bbedit
  figma
  github
  google-chrome
  hey
  hyper
  notion
  slack
  visual-studio-code
  zoom
)

install_application() {
  if test ! $(brew list | grep $application); then
    brew install --cask --appdir="/Applications" $application
    fancy_echo "$application installing"
  else
    fancy_echo "$application already installed. Skipping ..."
  fi
}

for application in "${applications[@]}"
  do install_application $application
done

# Clean up Homebrew files
fancy_echo "Cleaning up Homebrew ..."
brew cleanup

# VSCode extensions
vscode_extensions=(
  StevenPhan.framer-syntax
  esbenp.prettier-vscode
  silvenon.mdx
  vscodevim.vim
  vscode-icons-team.vscode-icons
)

install_vscode_extension() {
  code --install-extension $extension
}

for extension in "${vscode_extensions[@]}"
  do install_vscode_extension $extension
done

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
